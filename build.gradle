apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'jetty'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'maven'

def version = '0.1.0'
ext {
	javaVersion = '1.7'
	version = version
	buildDir = 'build'
	projectName = 'shuttershare-api'
}

repositories {
	maven { url "http://projectlombok.org/mavenrepo" } // Lombok
	mavenCentral()
}

dependencies {
	// slf4j + logback logging
	compile "ch.qos.logback:logback-classic:1.0.9"
	compile "org.slf4j:slf4j-api:1.6.6"
	compile "org.slf4j:jcl-over-slf4j:1.6.6"
	compile "org.slf4j:log4j-over-slf4j:1.6.6"

	// Spring
	compile 'org.springframework:spring-core:3.2.2.RELEASE'
	compile 'org.springframework:spring-context:3.2.2.RELEASE' // @Controller

	// Spring MVC + Freemarker
	compile 'org.springframework:spring-webmvc:3.2.2.RELEASE' // Spring MVC
	compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.1.2' // Spring MVC @ResponseBody
	compile 'org.springframework:spring-context-support:3.2.2.RELEASE' // Spring-freemarker
	compile 'org.freemarker:freemarker:2.3+'

    compile 'org.springframework.security:spring-security-core:3.1.4.RELEASE'
	compile 'org.springframework.security:spring-security-web:3.1.4.RELEASE'
	compile 'org.springframework.security:spring-security-config:3.1.4.RELEASE'

	// MyBatis
	compile 'org.mybatis:mybatis:3.2.2' // mybatis core
	compile 'org.mybatis:mybatis-spring:1.2.0' // mybatis-spring
	compile 'org.springframework:spring-jdbc:3.2.2.RELEASE' // spring-jdbc

	// Lombok
	compile 'org.projectlombok:lombok:0.10.1' // Lombok


	// Less
	compile 'ro.isdc.wro4j:wro4j-extensions:1.7.0'

	// Servlet
	providedCompile 'javax.servlet:servlet-api:2.5'

	// Test
	runtime 'org.hsqldb:hsqldb:2.3.2'
	testCompile group: 'junit', name: 'junit', version: '4+'
	testCompile 'org.springframework:spring-test:3.2.2.RELEASE'

	runtime 'commons-dbcp:commons-dbcp:1.4'

    // commons-upload (for file upload)
    runtime 'commons-fileupload:commons-fileupload:1.3'

    // JavaCV
    compile files('libs/javacpp.jar', 'libs/javacv.jar')

    // Quartz Daemon
    compile 'org.quartz-scheduler:quartz:1.8.5'
}

[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')
[configurations.runtime, configurations.default]*.exclude(module: 'log4j')
[configurations.runtime, configurations.default]*.exclude(module: 'slf4j-log4j12')

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

final String DEFAULT_PROFILE = 'dev'
allprojects {
	if (!project.hasProperty('profile') || !profile) {
		ext.profile = DEFAULT_PROFILE
		version = version + "-SNAPSHOT"
	}

	sourceSets {
		main {
			resources {
				srcDir "src/main/resources-${profile}"
			}
		}
	}
}

allprojects {
	if (ext.profile == 'real') {
		dependencies {
			runtime 'mysql:mysql-connector-java:5.1.25'
			runtime 'commons-dbcp:commons-dbcp:1.4'

		}
	}

    if (!project.hasProperty('os') || !os) {
        dependencies {
            compile files('libs/javacv-macosx-x86_64.jar', 'libs/opencv-2.4.8-macosx-x86_64.jar')
        }
    } else if (os == 'linux') {
        dependencies {
            compile files('libs/javacv-linux-x86_64.jar', 'libs/opencv-2.4.8-linux-x86_64.jar')
        }
    } else if (os == 'macosx') {
        dependencies {
            compile files('libs/javacv-macosx-x86_64.jar', 'libs/opencv-2.4.8-macosx-x86_64.jar')
        }
    }
}

// Basedir
task baseDirs << {
	sourceSets.each { set ->
		set.java.srcDirs.each { dir ->
			if (!dir.exists()) dir.mkdirs()
		}
		set.resources.srcDirs.each { dir ->
			if (!dir.exists()) dir.mkdirs()
		}
	}
	if (!buildDir.exists()) buildDir.mkdirs()
}


// Eclipse
tasks.eclipse.dependsOn cleanEclipse
tasks.eclipse.dependsOn baseDirs

eclipse {
	classpath {
		downloadSources = true
		defaultOutputDir = file("${buildDir}/classes/main")
	}
}

// IntelliJ
idea {
	project {
		jdkName = javaVersion
		languageLevel = javaVersion
	}
	module {
		jdkName = javaVersion
		outputDir = file('build')
		downloadJavadoc = true
		downloadSources = true
	}
}

// Jetty
jettyRun.contextPath = ''
jettyRunWar.contextPath = jettyRun.contextPath

// wrapper
task wrapper(type: Wrapper) {
	gradleVersion = '1.6'
}

